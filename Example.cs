using System;
using System.Threading.Tasks;
using RevitServerNet.Extensions;
using System.Linq;

namespace RevitServerNet
{
    /// <summary>
    /// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ RevitServerNet
    /// </summary>
    public static class Example
    {
        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        /// </summary>
        public static async Task RunExample()
        {
            try
            {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
                var api = new RevitServerApi("localhost", Environment.UserName, serverVersion: "2019");

                Console.WriteLine("=== RevitServerNet v1.7.0 - –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python API ===");

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
                var isRunning = await api.IsServerRunningAsync();
                Console.WriteLine($"–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {isRunning}");

                if (!isRunning)
                {
                    Console.WriteLine("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
                    return;
                }

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
                var serverInfo = await api.GetServerInfoAsync();
                Console.WriteLine($"–°–µ—Ä–≤–µ—Ä: {serverInfo.ServerName}");
                Console.WriteLine($"–í–µ—Ä—Å–∏—è: {serverInfo.ServerVersion}");

                // ‚úÖ –ù–û–í–û–ï v1.7.0: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
                var driveInfo = await api.GetServerDriveInfoAsync();
                Console.WriteLine($"–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {driveInfo.DriveFreeSpace / (1024*1024*1024):F1} GB —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ {driveInfo.DriveSpace / (1024*1024*1024):F1} GB");

                Console.WriteLine("\n--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ ---");

                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
                var rootContents = await api.GetRootFolderContentsAsync();
                Console.WriteLine($"–ü–∞–ø–æ–∫: {rootContents.Folders?.Count ?? 0}");
                Console.WriteLine($"–ú–æ–¥–µ–ª–µ–π: {rootContents.Models?.Count ?? 0}");

                // ‚úÖ –ù–û–í–û–ï v1.7.0: –°–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤  
                var files = await api.ListFilesAsync("|");
                Console.WriteLine($"–§–∞–π–ª–æ–≤: {files.Count}");

                // ‚úÖ –ù–û–í–û–ï v1.7.0: –°–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø–∞–ø–æ–∫
                var folders = await api.ListFoldersAsync("|");
                Console.WriteLine($"–¢–æ–ª—å–∫–æ –ø–∞–ø–æ–∫: {folders.Count}");

                // ‚úÖ –ù–û–í–û–ï v1.7.0: –°–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
                var models = await api.ListModelsAsync("|");
                Console.WriteLine($"–¢–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π: {models.Count}");

                // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –ø–∞–ø–∫–∏
                if (folders.Count > 0)
                {
                    Console.WriteLine("\n–ü–µ—Ä–≤—ã–µ –ø–∞–ø–∫–∏:");
                    foreach (var folder in folders.Take(3))
                    {
                        Console.WriteLine($"  - {folder.Name} ({folder.Size} bytes)");
                    }
                }

                // –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –º–æ–¥–µ–ª–∏
                if (models.Count > 0)
                {
                    Console.WriteLine("\n–ü–µ—Ä–≤—ã–µ –º–æ–¥–µ–ª–∏:");
                    foreach (var model in models.Take(3))
                    {
                        Console.WriteLine($"  - {model.Name} ({model.Size} bytes)");
                        
                        // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                        try
                        {
                            var modelInfo = await api.GetModelInfoAsync(model.Path);
                            Console.WriteLine($"    –°–æ–∑–¥–∞–Ω–∞: {modelInfo.DateCreated}");
                            Console.WriteLine($"    –ò–∑–º–µ–Ω–µ–Ω–∞: {modelInfo.DateModified}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"    –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {ex.Message}");
                        }
                    }
                }

                // ‚úÖ –ù–û–í–û–ï v1.7.0: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ - –≥–ª–∞–≤–Ω–∞—è —Ñ–∏—á–∞!
                Console.WriteLine("\n--- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ (Python walk equivalent) ---");
                
                try
                {
                    var walkResult = await api.WalkAsync("|", includeFiles: true, includeModels: true, digModels: false);
                    
                    Console.WriteLine($"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–•–û–î–ê:");
                    Console.WriteLine($"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {walkResult.TotalCount}");
                    Console.WriteLine($"  –ü–∞–ø–æ–∫: {walkResult.FolderPaths.Count}");
                    Console.WriteLine($"  –§–∞–π–ª–æ–≤: {walkResult.FilePaths.Count}");
                    Console.WriteLine($"  –ú–æ–¥–µ–ª–µ–π: {walkResult.ModelPaths.Count}");
                    
                    if (walkResult.AllPaths.Count > 0)
                    {
                        Console.WriteLine("\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π:");
                        foreach (var path in walkResult.AllPaths.Take(5))
                        {
                            Console.WriteLine($"  {path}");
                        }
                        
                        if (walkResult.AllPaths.Count > 5)
                        {
                            Console.WriteLine($"  ... –∏ –µ—â–µ {walkResult.AllPaths.Count - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞: {ex.Message}");
                }

                // –†–∞–±–æ—Ç–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
                Console.WriteLine("\n--- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ---");
                try
                {
                    var locks = await api.GetLocksAsync();
                    Console.WriteLine($"–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {locks.Locks?.Count ?? 0}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {ex.Message}");
                }

                Console.WriteLine("\n=== –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! ===");
                Console.WriteLine("‚úÖ RevitServerNet v1.7.0 - 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python API –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
                Console.WriteLine($"–î–µ—Ç–∞–ª–∏: {ex}");
            }
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö v1.7.0 –º–µ—Ç–æ–¥–æ–≤  
        /// </summary>
        public static async Task DemoNewMethods()
        {
            var api = new RevitServerApi("localhost", Environment.UserName, serverVersion: "2019");

            Console.WriteLine("üöÄ –î–ï–ú–û –ù–û–í–´–• –ú–ï–¢–û–î–û–í v1.7.0");
            Console.WriteLine("=".PadRight(40, '='));

            // ‚úÖ 1. ListFilesAsync - –∫–∞–∫ Python listfiles()
            Console.WriteLine("\nüìÅ 1. ListFilesAsync():");
            try
            {
                var files = await api.ListFilesAsync("|");
                Console.WriteLine($"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files.Count}");
                foreach (var file in files.Take(2))
                {
                    Console.WriteLine($"   - {file.Name} ({file.Size} bytes, Text: {file.IsText})");
                }
            }
            catch (Exception ex) { Console.WriteLine($"   –û—à–∏–±–∫–∞: {ex.Message}"); }

            // ‚úÖ 2. ListFoldersAsync - –∫–∞–∫ Python listfolders()  
            Console.WriteLine("\nüìÇ 2. ListFoldersAsync():");
            try
            {
                var folders = await api.ListFoldersAsync("|");
                Console.WriteLine($"   –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {folders.Count}");
                foreach (var folder in folders.Take(2))
                {
                    Console.WriteLine($"   - {folder.Name} ({folder.Size} bytes)");
                }
            }
            catch (Exception ex) { Console.WriteLine($"   –û—à–∏–±–∫–∞: {ex.Message}"); }

            // ‚úÖ 3. ListModelsAsync - –∫–∞–∫ Python listmodels()
            Console.WriteLine("\nüèóÔ∏è 3. ListModelsAsync():");
            try
            {
                var models = await api.ListModelsAsync("|");
                Console.WriteLine($"   –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models.Count}");
                foreach (var model in models.Take(2))
                {
                    Console.WriteLine($"   - {model.Name} ({model.Size} bytes)");
                }
            }
            catch (Exception ex) { Console.WriteLine($"   –û—à–∏–±–∫–∞: {ex.Message}"); }

            // ‚úÖ 4. WalkAsync - –∫–∞–∫ Python walk()
            Console.WriteLine("\nüö∂ 4. WalkAsync() - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥:");
            try
            {
                var walkResult = await api.WalkAsync("|", includeFiles: false, includeModels: true, digModels: false);
                Console.WriteLine($"   –í—Å–µ–≥–æ: {walkResult.TotalCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                Console.WriteLine($"   –ü–∞–ø–æ–∫: {walkResult.FolderPaths.Count}");
                Console.WriteLine($"   –ú–æ–¥–µ–ª–µ–π: {walkResult.ModelPaths.Count}");
            }
            catch (Exception ex) { Console.WriteLine($"   –û—à–∏–±–∫–∞: {ex.Message}"); }

            // ‚úÖ 5. GetServerDriveInfoAsync - –∫–∞–∫ Python getdriveinfo()
            Console.WriteLine("\nüíæ 5. GetServerDriveInfoAsync():");
            try
            {
                var driveInfo = await api.GetServerDriveInfoAsync();
                Console.WriteLine($"   –û–±—â–µ–µ –º–µ—Å—Ç–æ: {driveInfo.DriveSpace / (1024*1024*1024):F1} GB");
                Console.WriteLine($"   –°–≤–æ–±–æ–¥–Ω–æ: {driveInfo.DriveFreeSpace / (1024*1024*1024):F1} GB");
            }
            catch (Exception ex) { Console.WriteLine($"   –û—à–∏–±–∫–∞: {ex.Message}"); }

            Console.WriteLine("\n‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã v1.7.0 –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–∞–∫ –≤ Python)
        /// </summary>
        public static async Task FullServerAnalysis()
        {
            var api = new RevitServerApi("localhost", Environment.UserName, serverVersion: "2019");

            Console.WriteLine("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–†–í–ï–†–ê (–∫–∞–∫ –≤ Python API)");
            Console.WriteLine("=".PadRight(50, '='));

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
                var serverInfo = await api.GetServerInfoAsync();
                var driveInfo = await api.GetServerDriveInfoAsync();
                var walkResult = await api.WalkAsync("|", includeFiles: true, includeModels: true);

                Console.WriteLine("üìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
                Console.WriteLine($"  –°–µ—Ä–≤–µ—Ä: {serverInfo.ServerName}");
                Console.WriteLine($"  –í–µ—Ä—Å–∏—è: {serverInfo.ServerVersion}");
                Console.WriteLine($"  –†–æ–ª–∏: {string.Join(", ", serverInfo.ServerRoles ?? new System.Collections.Generic.List<string>())}");
                
                Console.WriteLine("\nüíæ –î–ò–°–ö–û–í–û–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û:");
                var usedSpace = driveInfo.DriveSpace - driveInfo.DriveFreeSpace;
                var usedPercent = (usedSpace * 100.0) / driveInfo.DriveSpace;
                Console.WriteLine($"  –û–±—â–µ–µ: {driveInfo.DriveSpace / (1024*1024*1024):F1} GB");
                Console.WriteLine($"  –ó–∞–Ω—è—Ç–æ: {usedSpace / (1024*1024*1024):F1} GB ({usedPercent:F1}%)");
                Console.WriteLine($"  –°–≤–æ–±–æ–¥–Ω–æ: {driveInfo.DriveFreeSpace / (1024*1024*1024):F1} GB");

                Console.WriteLine("\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:");
                Console.WriteLine($"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {walkResult.TotalCount}");
                Console.WriteLine($"  –ü–∞–ø–æ–∫: {walkResult.FolderPaths.Count}");
                Console.WriteLine($"  –§–∞–π–ª–æ–≤: {walkResult.FilePaths.Count}");
                Console.WriteLine($"  –ú–æ–¥–µ–ª–µ–π: {walkResult.ModelPaths.Count}");

                // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π
                if (walkResult.ModelPaths.Count > 0)
                {
                    Console.WriteLine("\nüèóÔ∏è –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ï–ô:");
                    long totalModelSize = 0;
                    int analyzedModels = 0;

                    foreach (var modelPath in walkResult.ModelPaths.Take(10)) // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
                    {
                        try
                        {
                            var modelInfo = await api.GetModelInfoAsync(modelPath);
                            totalModelSize += modelInfo.Size;
                            analyzedModels++;
                        }
                        catch { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π */ }
                    }

                    if (analyzedModels > 0)
                    {
                        var avgModelSize = totalModelSize / analyzedModels;
                        Console.WriteLine($"  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzedModels} –º–æ–¥–µ–ª–µ–π");
                        Console.WriteLine($"  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avgModelSize / (1024*1024):F1} MB");
                        Console.WriteLine($"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {totalModelSize / (1024*1024):F1} MB");
                    }
                }

                Console.WriteLine("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
                Console.WriteLine("üéØ RevitServerNet v1.7.0 –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Python API!");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {ex.Message}");
            }
        }
    }
} 