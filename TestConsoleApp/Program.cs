using System;
using System.Threading.Tasks;
using RevitServerNet;
using RevitServerNet.Extensions;

namespace TestConsoleApp
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("=== –¢–µ—Å—Ç RevitServerNet API ===");
            
            // –ó–∞–º–µ–Ω–∏—Ç–µ "localhost" –Ω–∞ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Revit Server
            string serverAddress = "localhost";
            
            try
            {
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ API
                var api = new RevitServerApi(serverAddress, Environment.UserName);
                
                Console.WriteLine($"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {serverAddress}");
                Console.WriteLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {Environment.UserName}");
                Console.WriteLine($"–ú–∞—à–∏–Ω–∞: {Environment.MachineName}");
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
                Console.WriteLine("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...");
                var isServerAvailable = await api.PingServerAsync();
                Console.WriteLine($"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {(isServerAvailable ? "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω" : "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")}");
                
                if (!isServerAvailable)
                {
                    Console.WriteLine("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Revit Server –∑–∞–ø—É—â–µ–Ω.");
                    return;
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
                Console.WriteLine("2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ...");
                try
                {
                    var serverInfo = await api.GetServerInfoAsync();
                    if (serverInfo != null)
                    {
                        Console.WriteLine($"   ‚úÖ –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: {serverInfo.ServerName ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}");
                        Console.WriteLine($"   ‚úÖ –í–µ—Ä—Å–∏—è: {serverInfo.ServerVersion ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}");
                        Console.WriteLine($"   ‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å: {serverInfo.RootPath ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}");
                    }
                    else
                    {
                        Console.WriteLine("   ‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {ex.Message}");
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
                Console.WriteLine("3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏...");
                try
                {
                    var rootContents = await api.GetRootFolderContentsAsync();
                    if (rootContents != null)
                    {
                        var foldersCount = rootContents.Folders?.Count ?? 0;
                        var modelsCount = rootContents.Models?.Count ?? 0;
                        
                        Console.WriteLine($"   ‚úÖ –ü–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ: {foldersCount}");
                        Console.WriteLine($"   ‚úÖ –ú–æ–¥–µ–ª–µ–π –≤ –∫–æ—Ä–Ω–µ: {modelsCount}");
                        
                        if (rootContents.Folders != null && foldersCount > 0)
                        {
                            Console.WriteLine("   üìÅ –ü–∞–ø–∫–∏:");
                            foreach (var folder in rootContents.Folders)
                            {
                                Console.WriteLine($"      - {folder.Name} ({folder.Size} –±–∞–π—Ç)");
                            }
                        }
                        
                        if (rootContents.Models != null && modelsCount > 0)
                        {
                            Console.WriteLine("   üìÑ –ú–æ–¥–µ–ª–∏:");
                            foreach (var model in rootContents.Models)
                            {
                                Console.WriteLine($"      - {model.Name} ({model.Size / 1024} KB, –≤–µ—Ä—Å–∏—è {model.ProductVersion ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"})");
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("   ‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {ex.Message}");
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                Console.WriteLine("4. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");
                try
                {
                    var allModels = await api.GetAllModelsRecursiveAsync();
                    var allFolders = await api.GetAllFoldersRecursiveAsync();
                    var activeLocksCount = await api.GetActiveLocksCountAsync();
                    
                    Console.WriteLine($"   ‚úÖ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {allModels?.Count ?? 0}");
                    Console.WriteLine($"   ‚úÖ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {allFolders?.Count ?? 0}");
                    Console.WriteLine($"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {activeLocksCount}");
                    
                    if (allModels != null && allModels.Count > 0)
                    {
                        long totalSize = 0;
                        foreach (var model in allModels)
                        {
                            totalSize += model.Size + model.SupportSize;
                        }
                        Console.WriteLine($"   ‚úÖ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–µ–π: {totalSize / (1024 * 1024)} MB");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
                }
                
                Console.WriteLine();
                Console.WriteLine("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! ===");
            }
            catch (RevitServerApiException ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ Revit Server API: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
            }
            
            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }
    }
} 