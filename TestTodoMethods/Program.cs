using System;
using System.Threading.Tasks;
using RevitServerNet;
using RevitServerNet.Extensions;

namespace TestTodoMethods
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• TODO –ú–ï–¢–û–î–û–í v1.7.0");
            Console.WriteLine("=".PadRight(60, '='));

            try
            {
                // –ù–ê–°–¢–†–û–ô–ö–ò - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò!
                var serverHost = "localhost"; // –≤–∞—à —Å–µ—Ä–≤–µ—Ä
                var userName = Environment.UserName;
                var serverVersion = "2019"; // –≤–∞—à–∞ –≤–µ—Ä—Å–∏—è

                Console.WriteLine($"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {serverHost}");
                Console.WriteLine($"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {userName}");
                Console.WriteLine($"üìÖ –í–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {serverVersion}");
                Console.WriteLine();

                var api = new RevitServerApi(serverHost, userName, serverVersion: serverVersion);

                // ‚úÖ –¢–ï–°–¢ 1: ListFilesAsync() 
                Console.WriteLine("üìÅ –¢–ï–°–¢ 1: ListFilesAsync() - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤");
                Console.WriteLine("-".PadRight(50, '-'));
                try
                {
                    var files = await api.ListFilesAsync("|");
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files.Count}");
                    
                    if (files.Count > 0)
                    {
                        Console.WriteLine("üìÑ –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤:");
                        var maxFiles = Math.Min(3, files.Count);
                        for (int i = 0; i < maxFiles; i++)
                        {
                            var file = files[i];
                            Console.WriteLine($"  - {file.Name} ({file.Size} bytes) [Text: {file.IsText}]");
                        }
                    }
                    Console.WriteLine();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine();
                }

                // ‚úÖ –¢–ï–°–¢ 2: ListFoldersAsync()
                Console.WriteLine("üìÇ –¢–ï–°–¢ 2: ListFoldersAsync() - —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫");
                Console.WriteLine("-".PadRight(50, '-'));
                try
                {
                    var folders = await api.ListFoldersAsync("|");
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {folders.Count}");
                    
                    if (folders.Count > 0)
                    {
                        Console.WriteLine("üìÅ –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–ø–æ–∫:");
                        var maxFolders = Math.Min(5, folders.Count);
                        for (int i = 0; i < maxFolders; i++)
                        {
                            var folder = folders[i];
                            Console.WriteLine($"  - {folder.Name} ({folder.Size} bytes)");
                        }
                    }
                    Console.WriteLine();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine();
                }

                // ‚úÖ –¢–ï–°–¢ 3: ListModelsAsync()
                Console.WriteLine("üèóÔ∏è –¢–ï–°–¢ 3: ListModelsAsync() - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π");
                Console.WriteLine("-".PadRight(50, '-'));
                try
                {
                    var models = await api.ListModelsAsync("|");
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models.Count}");
                    
                    if (models.Count > 0)
                    {
                        Console.WriteLine("üè† –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π:");
                        var maxModels = Math.Min(3, models.Count);
                        for (int i = 0; i < maxModels; i++)
                        {
                            var model = models[i];
                            Console.WriteLine($"  - {model.Name} ({model.Size} bytes)");
                            Console.WriteLine($"    –ü—É—Ç—å: {model.Path}");
                        }
                    }
                    Console.WriteLine();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine();
                }

                // ‚úÖ –¢–ï–°–¢ 4: WalkAsync() - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π!
                Console.WriteLine("üö∂ –¢–ï–°–¢ 4: WalkAsync() - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞");
                Console.WriteLine("-".PadRight(50, '-'));
                try
                {
                    Console.WriteLine("üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...");
                    var walkResult = await api.WalkAsync("|", includeFiles: true, includeModels: true, digModels: false);
                    
                    Console.WriteLine($"‚úÖ –û–±—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!");
                    Console.WriteLine($"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
                    Console.WriteLine($"  üóÇÔ∏è  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {walkResult.TotalCount}");
                    Console.WriteLine($"  üìÅ –ü–∞–ø–æ–∫: {walkResult.FolderPaths.Count}");
                    Console.WriteLine($"  üìÑ –§–∞–π–ª–æ–≤: {walkResult.FilePaths.Count}"); 
                    Console.WriteLine($"  üè† –ú–æ–¥–µ–ª–µ–π: {walkResult.ModelPaths.Count}");
                    
                    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π
                    if (walkResult.AllPaths.Count > 0)
                    {
                        Console.WriteLine("\nüéØ –ü–µ—Ä–≤—ã–µ 10 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");
                        var maxItems = Math.Min(10, walkResult.AllPaths.Count);
                        for (int i = 0; i < maxItems; i++)
                        {
                            Console.WriteLine($"  {i+1:D2}. {walkResult.AllPaths[i]}");
                        }
                        
                        if (walkResult.AllPaths.Count > 10)
                        {
                            Console.WriteLine($"  ... –∏ –µ—â–µ {walkResult.AllPaths.Count - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                        }
                    }
                    Console.WriteLine();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine();
                }

                // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: GetServerDriveInfoAsync()
                Console.WriteLine("üíæ –ë–û–ù–£–°: GetServerDriveInfoAsync() - –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ");
                Console.WriteLine("-".PadRight(50, '-'));
                try
                {
                    var driveInfo = await api.GetServerDriveInfoAsync();
                    Console.WriteLine($"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ –ø–æ–ª—É—á–µ–Ω–∞:");
                    Console.WriteLine($"  üíø –û–±—â–µ–µ –º–µ—Å—Ç–æ: {driveInfo.DriveSpace / (1024 * 1024 * 1024):F1} GB");
                    Console.WriteLine($"  üÜì –°–≤–æ–±–æ–¥–Ω–æ: {driveInfo.DriveFreeSpace / (1024 * 1024 * 1024):F1} GB");
                    var usedPercent = ((driveInfo.DriveSpace - driveInfo.DriveFreeSpace) * 100.0) / driveInfo.DriveSpace;
                    Console.WriteLine($"  üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usedPercent:F1}%");
                    Console.WriteLine();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine();
                }

                Console.WriteLine("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!");
                Console.WriteLine("‚úÖ RevitServerNet v1.7.0 - 100% –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° PYTHON API! üöÄ");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {ex.Message}");
                Console.WriteLine($"üîç –î–µ—Ç–∞–ª–∏: {ex}");
            }

            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }
    }
} 