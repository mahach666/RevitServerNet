using System;
using System.Threading.Tasks;
using RevitServerNet;
using RevitServerNet.Extensions;

namespace TestVersions
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("=== –¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Revit Server API ===");
            Console.WriteLine();
            
            string serverAddress = "localhost"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
            
            // –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            string[] versionsToTest = { "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024" };
            
            Console.WriteLine($"–°–µ—Ä–≤–µ—Ä: {serverAddress}");
            Console.WriteLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {Environment.UserName}");
            Console.WriteLine();
            
            foreach (string version in versionsToTest)
            {
                Console.WriteLine($"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é {version}...");
                
                try
                {
                    var api = new RevitServerApi(serverAddress, Environment.UserName, serverVersion: version);
                    Console.WriteLine($"   ‚úÖ URL —Å–æ–∑–¥–∞–Ω: {api.BaseUrl}");
                    
                    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                    try
                    {
                        var serverInfo = await api.GetServerInfoAsync();
                        if (serverInfo != null)
                        {
                            Console.WriteLine($"   üéØ –†–ê–ë–û–¢–ê–ï–¢! –°–µ—Ä–≤–µ—Ä: {serverInfo.ServerName}, –í–µ—Ä—Å–∏—è API: {serverInfo.ServerVersion}");
                        }
                        else
                        {
                            Console.WriteLine($"   ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã");
                        }
                    }
                    catch (RevitServerApiException apiEx)
                    {
                        // HTTP –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                        if (apiEx.Message.Contains("404") || apiEx.Message.Contains("NotFound"))
                        {
                            Console.WriteLine($"   ‚ùå –í–µ—Ä—Å–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (404)");
                        }
                        else if (apiEx.Message.Contains("405") || apiEx.Message.Contains("MethodNotAllowed"))
                        {
                            Console.WriteLine($"   ‚ùå –í–µ—Ä—Å–∏—è {version}: –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω (405)");
                        }
                        else
                        {
                            Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}: {apiEx.Message}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}: {ex.Message}");
                    }
                }
                catch (ArgumentException argEx)
                {
                    // –û—à–∏–±–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≤–µ—Ä—Å–∏–∏
                    Console.WriteLine($"   ‚ùå –í–µ—Ä—Å–∏—è {version} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π: {argEx.Message}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version}: {ex.Message}");
                }
                
                Console.WriteLine();
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
                await Task.Delay(500);
            }
            
            Console.WriteLine("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ===");
            Console.WriteLine();
            Console.WriteLine("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç:");
            Console.WriteLine("   ‚úÖ - –í–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
            Console.WriteLine("   ‚ùå 404 - –í–µ—Ä—Å–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
            Console.WriteLine("   ‚ùå 405 - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏–ª–∏ –º–µ—Ç–æ–¥");
            Console.WriteLine("   ‚ùå API/–û–±—â–∞—è - –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π");
            Console.WriteLine();
            Console.WriteLine("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑–∞–ª–∞ ‚úÖ —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }
    }
} 