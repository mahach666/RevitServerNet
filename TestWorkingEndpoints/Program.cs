using System;
using System.Threading.Tasks;
using RevitServerNet;
using RevitServerNet.Extensions;

namespace TestWorkingEndpoints
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("=== –¢–µ—Å—Ç —Ä–∞–±–æ—á–∏—Ö endpoint'–æ–≤ Revit Server API ===");
            Console.WriteLine();
            
            string serverAddress = "localhost"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
            string serverVersion = "2019";      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –≤–µ—Ä—Å–∏—é
            
            try
            {
                var api = new RevitServerApi(serverAddress, Environment.UserName, serverVersion: serverVersion);
                
                Console.WriteLine($"–°–µ—Ä–≤–µ—Ä: {serverAddress}");
                Console.WriteLine($"–í–µ—Ä—Å–∏—è: {serverVersion}");  
                Console.WriteLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {Environment.UserName}");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                Console.WriteLine($"Base URL: {api.BaseUrl}");
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 1: serverproperties (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
                Console.WriteLine("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º /serverproperties...");
                try
                {
                    var serverInfo = await api.GetServerInfoAsync();
                    if (serverInfo != null)
                    {
                        Console.WriteLine($"   ‚úÖ –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: {serverInfo.ServerName ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}");
                        Console.WriteLine($"   ‚úÖ –í–µ—Ä—Å–∏—è: {serverInfo.ServerVersion ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}");
                        Console.WriteLine($"   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏: {serverInfo.MaximumFolderPathLength}");
                        Console.WriteLine($"   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏: {serverInfo.MaximumModelNameLength}");
                        
                        if (serverInfo.ServerRoles != null && serverInfo.ServerRoles.Count > 0)
                        {
                            Console.WriteLine($"   ‚úÖ –†–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞: {string.Join(", ", serverInfo.ServerRoles)}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("   ‚ùå serverProperties –≤–µ—Ä–Ω—É–ª null");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ serverproperties: {ex.Message}");
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 2: |/contents (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏)
                Console.WriteLine("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º |/contents...");
                try
                {
                    var rootContents = await api.GetRootFolderContentsAsync();
                    if (rootContents != null)
                    {
                        var foldersCount = rootContents.Folders?.Count ?? 0;
                        var modelsCount = rootContents.Models?.Count ?? 0;
                        
                        Console.WriteLine($"   ‚úÖ –ü–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ: {foldersCount}");
                        Console.WriteLine($"   ‚úÖ –ú–æ–¥–µ–ª–µ–π –≤ –∫–æ—Ä–Ω–µ: {modelsCount}");
                        
                        if (foldersCount > 0 && rootContents.Folders != null)
                        {
                            Console.WriteLine("   üìÅ –ü–µ—Ä–≤—ã–µ –ø–∞–ø–∫–∏:");
                            for (int i = 0; i < Math.Min(3, foldersCount); i++)
                            {
                                var folder = rootContents.Folders[i];
                                Console.WriteLine($"      - {folder.Name} ({folder.Size} –±–∞–π—Ç, —Å–æ–∑–¥–∞–Ω–∞: {folder.DateCreated})");
                                
                                // –¢–µ—Å—Ç–∏—Ä—É–µ–º DirectoryInfo –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏
                                if (i == 0)
                                {
                                    try
                                    {
                                                                            var folderInfo = await api.GetFolderInfoAsync($"|{folder.Name}");
                                    Console.WriteLine($"        ‚úÖ directoryinfo —Ä–∞–±–æ—Ç–∞–µ—Ç: {folderInfo?.Name ?? "null"}");
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine($"        ‚ùå directoryinfo error: {ex.Message}");
                                }
                                }
                            }
                        }
                        
                        if (modelsCount > 0 && rootContents.Models != null)
                        {
                            Console.WriteLine("   üìÑ –ü–µ—Ä–≤—ã–µ –º–æ–¥–µ–ª–∏:");
                            for (int i = 0; i < Math.Min(3, modelsCount); i++)
                            {
                                var model = rootContents.Models[i];
                                Console.WriteLine($"      - {model.Name} ({model.Size / 1024} KB)");
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("   ‚ùå |/contents –≤–µ—Ä–Ω—É–ª null");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ |/contents: {ex.Message}");
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ serverProperties)
                Console.WriteLine("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...");
                try
                {
                    var isOnline = await api.PingServerAsync();
                    var isRunning = await api.IsServerRunningAsync();
                    
                    Console.WriteLine($"   ‚úÖ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω: {isOnline}");
                    Console.WriteLine($"   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {isRunning}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {ex.Message}");
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 4: locks (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                Console.WriteLine("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º /locks...");
                try
                {
                    var locksCount = await api.GetActiveLocksCountAsync();
                    Console.WriteLine($"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {locksCount}");
                    
                    if (locksCount > 0)
                    {
                        var allLocks = await api.GetLocksAsync();
                        if (allLocks?.Locks != null && allLocks.Locks.Count > 0)
                        {
                            Console.WriteLine("   üîí –ü–µ—Ä–≤—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:");
                            for (int i = 0; i < Math.Min(3, allLocks.Locks.Count); i++)
                            {
                                var lockInfo = allLocks.Locks[i];
                                Console.WriteLine($"      - {lockInfo.UserName} (–≤—Ä–µ–º—è: {lockInfo.TimeStamp})");
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ /locks: {ex.Message}");
                    Console.WriteLine("   ‚ÑπÔ∏è Endpoint /locks –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ API");
                }
                
                Console.WriteLine();
                
                // –¢–µ—Å—Ç 5: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                Console.WriteLine("5. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");
                Console.WriteLine();
                Console.WriteLine("üéØ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´:");
                Console.WriteLine("   ‚úÖ /serverproperties (–±—ã–ª /serverProperties)");  
                Console.WriteLine("   ‚úÖ /directoryinfo (–±—ã–ª /DirectoryInfo)");
                Console.WriteLine("   ‚úÖ /modelinfo (–±—ã–ª /modelInfo)");
                Console.WriteLine("   ‚úÖ /history (—É–∂–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º)");
                Console.WriteLine();
                try
                {
                    var allModels = await api.GetAllModelsRecursiveAsync();
                    var allFolders = await api.GetAllFoldersRecursiveAsync();
                    
                    Console.WriteLine($"   ‚úÖ –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {allModels?.Count ?? 0}");
                    Console.WriteLine($"   ‚úÖ –í—Å–µ–≥–æ –ø–∞–ø–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {allFolders?.Count ?? 0}");
                    
                    if (allModels != null && allModels.Count > 0)
                    {
                        long totalSize = 0;
                        foreach (var model in allModels)
                        {
                            totalSize += model.Size + model.SupportSize;
                        }
                        Console.WriteLine($"   ‚úÖ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–µ–π: {totalSize / (1024 * 1024)} MB");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}");
                }
                
                Console.WriteLine();
                Console.WriteLine("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ===");
                Console.WriteLine("‚úÖ –í—Å–µ —Ä–∞–±–æ—á–∏–µ endpoint'—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (RevitServerApiException ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ Revit Server API: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
            }
            
            Console.WriteLine();
            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }
    }
} 